#include "../../../opt/ibm/ILOG/CPLEX_Studio221/concert/include/ilconcert/ilomodel.h"
#include "../../../opt/ibm/ILOG/CPLEX_Studio221/cplex/include/ilcplex/ilocplex.h"
#include <math.h>
#include <stdint.h>
#include <time.h>
#include <cstring>
#include <list>
#include <string>  
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <iostream> 
int main()
{
std::string fileName_ = std::string("problem.lp");

    // std::string fileName = tmpFile.substr(0, tmpFile.size()-4) + "_" + _clkPhase + ".mps" ;
    //std::string fileName_ = tmpFile.substr(0, tmpFile.size() - 4) + ".mps";//".lp";
    char *fileName = const_cast<char *>(fileName_.c_str());

    std::string outputFile_ = fileName_.substr(0, fileName_.size() - 3) + "_sol.txt";
    char *outputFile = const_cast<char *>(outputFile_.c_str());
    //std::cout << "--Solving LP Problem in " << fileName << std::endl;
    remove(outputFile_.c_str());
    char inFile[fileName_.size() + 1];
    strcpy(inFile, fileName_.c_str());

    time_t begin, end;

    IloEnv env;
    
    try {
        IloModel model(env);
        IloCplex cplex(env);

        cplex.setParam(IloCplex::RootAlg, IloCplex::AutoAlg);

        IloObjective   obj;
        IloNumVarArray var(env);
        IloRangeArray  rng(env);
        cplex.importModel(model, inFile, obj, var, rng);

        cplex.extract(model);
        // add time limit
        int timeLimit = 600; // in seconds
        cplex.setParam(IloCplex::TiLim, timeLimit);	
        time(&begin);
        if ( !cplex.solve() ) {
            env.error() << "Failed to optimize LP" << std::endl;
            throw(-1);
        }
        time(&end);
        IloNumArray vals(env);
        cplex.getValues(vals, var);
        env.out() << "Solution status = " << cplex.getStatus() << std::endl;
        env.out() << "Solution value  = " << cplex.getObjValue() << std::endl;
        // write out to file
        std::ofstream outF;
        outF.open(outputFile);
        outF << "Solution status " << cplex.getStatus() << ", Objective value "<< cplex.getObjValue() << " (Generated by Cplex, last number in each row invalid)\n"<<"Actual values of the variables:\n";
        for (IloInt i = 0; i < var.getSize(); ++i) {
            IloNumVar x = var[i];
            outF << "\t" << i << " " << x.getName() << "\t\t" << cplex.getValue(x) << "\t\t" << "0\n";
        }
        outF.close();
        

        try {     // basis may not exist
            IloCplex::BasisStatusArray cstat(env);
            cplex.getBasisStatuses(cstat, var);
            //env.out() << "Basis statuses  = " << cstat << std::endl;
        } catch (...) {
        }

        env.out() << "Maximum bound violation = "
                    << cplex.getQuality(IloCplex::MaxPrimalInfeas) << std::endl;
    }
    catch (IloException& e) {
        std::cerr << "Concert exception caught: " << e << std::endl;
    }
    catch (...) {
        std::cerr << "Unknown exception caught" << std::endl;
    }
    time_t elapsed = end - begin;
    std::cout<<"Solution RunTime:"<<elapsed<<std::endl;
    env.end();
    
    return 0;
}
